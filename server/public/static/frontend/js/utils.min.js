layui.config({
    base: '/static/common/library/layui/exts/'
}).extend({
    echarts:      'echarts/echarts',
    echartsTheme: 'echarts/echartsTheme',
    tinymce:      'tinymce/tinymce',
    inputTags:    'inputTags/inputTags',
    iconPicker:   'iconPicker/iconPicker',
    selectArea:   'selectArea/selectArea',
    mapBaidu:     'mapBaidu/mapBaidu',
    xmSelect:     'xmSelect/xmSelect'
}).use(function () {
    layInit();
    layTips();
    laySession();
    layThumbUpload();
    layThumbDelete();

    // 页面加载完毕再显示
    $().ready(function() {
        $('html').removeAttr('style');
    });
});

/**
 * 工具集合
 */
let lock = {};
let load = {};
let waitUtil = {
    // 请求
    ajax: function (options) {
        let loading = undefined;
        return new Promise((resolve, reject) => {
            $.ajax({
                url: options.url
                ,data: options.data || {}
                ,type: options.type || 'GET'
                ,async: options.async || true
                ,timeout: options.timeout || 3000
                ,dataType: 'json'
                ,success: function (res) {
                    let fulShow = options.fulShow === false ? false : true;
                    let errShow = options.errShow === false ? false : true;
                    if (fulShow===true && res.code===0) {
                        layer.msg(res.msg, {icon: 1, time: 1800});
                    }
                    if (errShow===true && res.code!==0) {
                        layer.msg(res.msg, {icon: 2, time: 1800});
                    }
                    resolve(res);
                }
                ,error: function(jqXHR, error, errorThrown) {
                    layer.msg('请求错误:'+error, {icon: 2, time: 1800}, function () {
                        reject(error);
                    });
                }
            });
        });
    }
    // 弹窗
    ,popup: function (options) {
        let width = options.area[0] || "90%";
        let height = options.area[1] || "90%";

        if (width.endsWith('px')) {
            if ($(window).width() <= width.replace("/px/", "")) {
                width = "90%";
            }
        }

        if (height.endsWith('px')) {
            if ($(window).height() <= height.replace("/px/", "")) {
                height = "90%";
            }
        }

        if ($(window).width() < 768 || layui.device().mobile) {
            width = "90%";
            height = "90%";
        }

        layer.open({
            type: options.type || 2
            ,title: options.title
            ,skin: options.skin ? options.skin : ''
            ,maxmin: options.maxmin ? true : false
            ,shadeClose: options.shadeClose ? true : false
            ,area: [width, height]
            ,content: options.url,
            success: function(layero, index){
                let iframeWindow  = window["layui-layer-iframe" + index]
                let iframeElement = $(layero).find("iframe").contents();

                let theme = waitCache.getItem('theme');
                iframeElement.find('body').attr('data-theme', theme);

                iframeElement.find("#closePopupWindow").click(function(){
                    layer.close(index)
                });
                options.success(iframeWindow, index, iframeElement)
            }
        });
    }
    // 事件
    ,event: function (options) {
        let active = options;

        // 绑定自定义事件
        $(document).on('click', '*[lay-event]', function (e) {
            let type = $(this).attr('lay-event');
            active[type] ? active[type].call(this, $(this), e) : '';
        });

        layui.use(['element', 'table', 'form'], function () {
            // 监听表复选框事件
            layui.table.on('checkbox(wait-table-list)', function(obj){
                let nodes  = $('.layui-btn[lay-event="leave"]');
                if (nodes.length) {
                    let arrays = layui.table.checkStatus('wait-table-list').data;
                    if (arrays.length && nodes.length) {
                        nodes.removeClass('layui-btn-forbid')
                    } else {
                        nodes.addClass('layui-btn-forbid')
                    }
                }
            });

            // 监听表格头部事件
            layui.table.on('toolbar(wait-table-list)', function(obj) {
                let type = obj.event;
                active[type] ? active[type].call(this, obj) : '';
            });

            // 监听表格右侧事件
            layui.table.on('tool(wait-table-list)', function(obj) {
                let type = obj.event;
                active[type] ? active[type].call(this, obj) : '';
            });

            // 监听是否切换
            layui.form.on('switch(switch-status)', function(obj) {
                active['change'] ? active['change'].call(this, obj) : '';
            });
        });

        return active;
    }
    // 搜索
    ,search: function (table) {
        // 监听搜索
        layui.form.on('submit(search)', function(data) {
            table.reload({
                where: data.field,
                page: {curr: 1}
            });
        });

        // 清空搜索
        layui.form.on('submit(clear-search)', function() {
            $('.layui-search input').val("");
            $('.layui-search select').val("");
            layui.form.render('select');
            table.reload({
                where: [],
                page: {curr: 1}
            });
        });
    }
    // 表格
    ,table: function (options) {
        return layui.table.render({
            ...options
            ,elem: options.elem
            ,url: options.url
            ,method: options.method || 'GET'
            ,toolbar: options.toolbar === false ? false : options.toolbar || '#toolbar'
            ,defaultToolbar: options.defaultToolbar === false ? [] : ['filter', 'exports', 'print']
            ,cellExpandedMode: options.cellExpandedMode || 'tips'
            ,page: options.page === undefined ? true : options.page
            ,limit: options.limit || 20
            ,limits: options.limits || [20, 40, 60, 80, 100, 120, 140, 160]
            ,skin: options.skin ||  'line'
            ,cols: options.cols
            ,parseData: function(res) {
                if (res.data.list === undefined) {
                    return {
                        'code': res.code
                        ,'msg': res.msg
                        ,'extend': res.extend || []
                        ,'data': res.data
                    };
                } else {
                    return {
                        'code': res.code
                        ,'msg': res.msg
                        ,'count': res.data.count
                        ,'extend': res.data.extend || []
                        ,'data': res.data.list
                    };
                }
            },
            done: function(res){
                setTimeout(function () {
                    // 适配行高
                    $('.layui-table-main tr').each(function (index, val) {
                        $($('.layui-table-fixed-l .layui-table-body tbody tr')[index]).height($(val).height());
                        $($('.layui-table-fixed-r .layui-table-body tbody tr')[index]).height($(val).height());
                    });

                    // 回调事件
                    if (options.done) {
                        options.done(res);
                    }
                }, 100);
            }
        });
    }
    // 复选
    ,checkbox: function (options) {
        options    = options ? options : {};
        let key    = options.key    || 'id';
        let filter = options.filter || 'wait-table-list';
        let arrays = layui.table.checkStatus(filter).data;
        let data = [];
        arrays.forEach(function (item) {
            data.push(item[key]);
        });
        return data;
    }
    // 锁定按钮
    ,locking: function (options) {
        let icon = 'layui-icon layui-icon-loading ';
        let anim = 'layui-anim layui-anim-rotate layui-anim-loop';
        if (!$(options).hasClass('layui-btn-forbid')) {
            $(options).addClass('layui-btn-forbid');
            $(options).prepend('<i class="' + icon + anim + '" style="font-size:13px;"></i> ');
        }
    }
    // 解锁按钮
    ,unlock: function (options) {
        setTimeout(function () {
            $(options).removeClass('layui-btn-forbid');
            $(options).children('i').remove();
        }, 100);
    }
    // 截流防抖
    ,debounce(delay, func) {
        let timer = null;
        return function() {
            let context = this;
            let args = arguments;
            clearTimeout(timer);
            timer = setTimeout(function() {
                func.apply(context, args);
            }, delay);
        };
    }
    // 过滤对象空字段
    ,filterNullObj: function (obj) {
        return Object.keys(obj).reduce((acc, key) => {
            if (obj[key] !== '' && obj[key] !== null && obj[key] !== undefined) {
                acc[key] = obj[key];
            }
            return acc;
        }, {});
    }
    // URL参数获取
    ,getUrlParam(key) {
        let reg = new RegExp('(^|&)' + key + '=([^&]*)(&|$)', 'i');
        let r = window.location.search.substr(1).match(reg);
        let context = '';
        if (r != null)
            context = decodeURIComponent(r[2]);
        reg = null;
        r = null;
        return context == null || context === '' || context === 'undefined' ? '' : context;
    }
    // URL参数调整
    ,setUrlParam(url, key, val) {
        let pattern = key + '=([^&]*)';
        let replaceText = key + '=' + val;
        if(url.match(pattern)){
            let tmp = '/('+ key+'=)([^&]*)/gi';
            return url.replace(eval(tmp),replaceText);
        }else{
            return url.match('[\?]') ? (url + '&'+ replaceText) : (url+'?' + replaceText);
        }
    }
}

/**
 * 初始加载
 */
function layInit() {
    // 激活选项卡
    $(document).on('click', '.layui-tab[lay-filter=tab] li', function () {
        let tab = $(this).attr('data-tab');
        if (tab !== null && tab !== null && tab) {
            let url = waitUtil.setUrlParam(location.href, 'tab', tab);
            history.replaceState(null, null, url);
        }
    });

    // 切换选项卡
    let tab = waitUtil.getUrlParam('tab');
    if (tab !== null && tab !== null && tab) {
        let elem = $('.layui-tab[lay-filter=tab] .layui-tab-title li[data-tab='+tab+']');
        if (elem.length) {
            elem.click();
        }
    }
}

/**
 * 悬停提示
 */
function layTips() {
    $('body').on('mouseenter', '*[lay-tips]', function(){
        let that = $(this);
        let tips      = that.attr('lay-tips');
        let offset    = that.attr('lay-offset');
        let direction = that.attr('lay-direction');
        let index = layer.tips(tips, this, {
            tips: direction || 1
            ,time: -1
            ,success: function(layero){
                if(offset){
                    layero.css('margin-left', offset + 'px');
                }
            }
        });
        that.data('index', index);
    }).on('mouseleave', '*[lay-tips]', function(){
        layer.close($(this).data('index'));
    });
}

/**
 * 登录注册
 */
function laySession(scene) {
    const handle = (scene) => {
        layer.closeAll();
        $.ajax({
            url: '/frontend/login/index?scene='+scene,
            dataType: 'html',
            cache: false,
            async: false,
            success: function (res) {
                layer.open({
                    type: 1,
                    resize: false,
                    scrollbar: false,
                    title: false,
                    skin: 'popup-skin-session',
                    shade: 0.5,
                    area: ['380px'],
                    content: res,
                    success: function(layero, index) {
                        $(layero).find('.jump').click(function(){
                            if (scene === 'login') {
                                handle('register');
                            } else {
                                handle('login');
                            }
                        });
                    }
                });
            }
        });
    }

    if (scene === 'login') {
        handle(scene);
    }

    $(document).on('click', '#js-enroll-btn', () => { handle('login'); });
    $(document).on('click', '#js-signup-btn', () => { handle('register'); });
    $(document).on('click', '.js-forget-btn', () => { handle('resetting'); });
}

/**
 * 附件删除
 */
function layThumbDelete() {
    $(document).on('click', '.thumbnail .preview i', function () {
        let elem   = $(this).parents('.thumbnail');
        let limit  = elem.attr('data-limit') || 1;

        $(this).parent().remove();
        let previews = elem.children('.musters .preview');
        if (previews.length<=0 || previews.length < parseInt(limit)) {
            elem.children('.builder').removeClass('layui-hide');
        }
    });
}

/**
 * 附件上传
 */
function layThumbUpload() {
    let $body = $('body');
    let builder = $body.find('.thumbnail .builder.layui-auto-call');

    builder.each(function () {
        // 附件节点
        let that   = $(this);
        let node   = $(this).parents('.thumbnail');
        // 附件类型
        let type   = node.attr('data-type');
        // 附件字段
        let field  = node.attr('data-field');
        // 限制数量
        let limit  = parseInt(node.attr('data-limit') || 1);
        // 是否水印
        let water  = Boolean(node.attr('data-water') || true);
        // 上传引擎
        let engine = node.attr('data-engine') || 'permanent';

        let pathname = 'frontend';

        let url;
        let accept;
        let acceptMime;
        let exts;
        let size;
        switch (type) {
            case 'image':
                accept = 'images';
                acceptMime = 'image/*';
                exts = 'png|jpg|jpeg|gif|bmp|ico';
                size = 1024 * 10;
                field = field === undefined ? 'image' : field;
                url = '/' + pathname + '/upload/'+ engine + '?type=picture';
                break;
            case 'video':
                accept = 'video';
                acceptMime = 'video/*';
                exts = 'mp4|mp3|avi|flv|rmvb|mov';
                size = 1024 * 10;
                field = field === undefined ? 'video' : field;
                url = '/' + pathname + '/upload/' + engine + '?type=video';
                break;
            case 'package':
                accept = 'file';
                acceptMime = 'file/*';
                exts = 'zip|rar|iso|7z|tar|gz|arj|bz2';
                size = 30 * 1024;
                field = field === undefined ? 'package' : field;
                url = '/' + pathname + '/upload/' + engine + '?type=package';
                break;
            case 'document':
                accept = 'file';
                acceptMime = 'file/*';
                exts = 'txt|doc|docx|xls|xlsx|ppt|pptx|pdf|pem';
                size = 30 * 1024;
                field = field === undefined ? 'document' : field;
                url = '/' + pathname + '/upload/' + engine + '?type=document';
                break;
        }

        function getTemplate(type, url) {
            switch (type) {
                case 'package':
                case 'document':
                case 'image':
                    return '<img src="'+url+'" alt="img" />';
                case 'video':
                    return '<video src="'+url+'"></video>'
            }
        }

        layui.upload.render({
            elem: that
            ,url: url
            ,field: 'file'
            ,accept: accept
            ,acceptMime: acceptMime
            ,exts: exts
            ,size: size
            ,done: function(res){
                if (res.code === 0) {
                    let node = this.elem;

                    if (!node.prev().hasClass('musters')) {
                        node.before('<div class="musters"></div>');
                    }

                    if (node.prev().find('.preview').length >= limit) {
                        return layer.msg('limit exceeded error');
                    }

                    let template = '';
                    template += '<div class="preview">';
                    template += '<input type="hidden" name="' + field + '" value="' + res.data.url + '">';
                    template += '<i class="layui-icon layui-icon-close"></i>';
                    template += getTemplate(type, res.data.url);
                    node.prev().append(template);
                    if (node.prev().find('.preview').length >= limit) {
                        node.addClass('layui-hide');
                    }
                } else {
                    return layer.msg(res.msg);
                }
            }
        });
    });
}

// default-passive-events
(function() {
    const originalAddEventListener = EventTarget.prototype.addEventListener;
    EventTarget.prototype.addEventListener = function(type, listener, options) {
        const passiveEvents = ['mousewheel', 'touchstart', 'touchmove', 'wheel', 'scroll'];
        if (passiveEvents.includes(type)) {
            options = typeof options === 'object' ? options : {};
            options.passive = true;
        }
        return originalAddEventListener.call(this, type, listener, options);
    };
})();
