layui.config({
    base: '/static/common/library/layui/exts/'
}).extend({
    echarts:      'echarts/echarts',
    echartsTheme: 'echarts/echartsTheme',
    tinymce:      'tinymce/tinymce',
    inputTags:    'inputTags/inputTags',
    iconPicker:   'iconPicker/iconPicker',
    xmSelect:     'xmSelect/xmSelect',
    selectArea:   'selectArea/selectArea',
}).use(function () {
    layInit();
    layTips();
    layTheme();
    layThumbUpload();
    layThumbDelete();
    layThumbSelect();

    // 页面加载完毕再显示
    $().ready(function() {
        // 页面显示
        $('html').removeAttr('style');

        // 图片放大
        $(document).on('click', '.previewImage', function () {
            previewImage(this)
        });

        // 拖动功能
        let dragNodes = document.querySelectorAll('.thumbnail .musters');
        for (let i=0; i<dragNodes.length; i++) {
            Sortable.create(dragNodes[i], {animation: 150, ghostClass: 'blue-background-class'});
        }
    });
});

/**
 * 工具集合
 */
let waitUtil = {
    // 请求
    ajax: function (options) {
        let loading = undefined;
        return new Promise((resolve, reject) => {
            $.ajax({
                url: options.url
                ,data: options.data || {}
                ,type: options.type || 'GET'
                ,async: options.async || true
                ,timeout: options.timeout || 3000
                ,dataType: 'json'
                ,success: function (res) {
                    let fulShow = options.fulShow === false ? false : true;
                    let errShow = options.errShow === false ? false : true;
                    if (fulShow===true && res.code===0) {
                        layer.msg(res.msg, {icon: 1, time: 1800});
                    }
                    if (errShow===true && res.code!==0) {
                        layer.msg(res.msg, {icon: 2, time: 1800});
                    }
                    resolve(res);
                }
                ,error: function(jqXHR, error, errorThrown) {
                    layer.msg('请求错误:'+error, {icon: 2, time: 1800}, function () {
                        reject(error);
                    });
                }
            });
        });
    }
    // 弹窗
    ,popup: function (options) {
        let width   = options.area[0] || '95%';
        let height  = options.area[1] || '95%';
        let parents = options.parent || false;

        let winWidth = parents ? parent.window.innerWidth : $(window).width();
        let winHeight = parents ? parent.window.innerHeight : $(window).height();
        if (width.endsWith('px')) {
            if (winWidth <= width.replace('/px/', '')) {
                width = '90%';
            }
        }

        if (height.endsWith('px')) {
            if (winHeight <= height.replace('/px/', '')) {
                height = '90%';
            }
        }

        if (winWidth < 768 || layui.device().mobile) {
            width = '90%';
            height = '90%';
        }

        let layOpen = parents ? parent.layer : layer;
        layOpen.open({
            type: options.type || 2
            ,title: options.title
            ,skin: options.skin || 'layer-skin-black'
            ,maxmin: options.maxmin || true
            ,shadeClose: options.shadeClose || false
            ,area: [width, height]
            ,content: options.url
            ,success: function(layero, index){
                const $layero     = layui.$(layero);
                let iframeWindow  = $layero.find('iframe')[0].contentWindow;
                let iframeElement = $layero.find('iframe').contents();

                iframeElement.find('#closePopupWindow').click(function() {
                    layOpen.close(index)
                });

                if (options.success) {
                    options.success(iframeWindow, index, iframeElement);
                }
            }
        });
    }
    // 事件
    ,event: function (options) {
        let active = options;

        // 绑定自定义事件
        $(document).on('click', '*[lay-event]', function (e) {
            let type = $(this).attr('lay-event');
            active[type] ? active[type].call(this, $(this), e) : '';
        });

        // 绑定数据表事件
        layui.use(['element', 'table', 'form'], function () {
            // 监听表复选框事件
            layui.table.on('checkbox(wait-table-list)', function(obj){
                let nodes  = $('.layui-btn[lay-event="leave"]');
                if (nodes.length) {
                    let arrays = layui.table.checkStatus('wait-table-list').data;
                    if (arrays.length && nodes.length) {
                        nodes.removeClass('layui-btn-forbid')
                    } else {
                        nodes.addClass('layui-btn-forbid')
                    }
                }
            });

            // 监听表格头部事件
            layui.table.on('toolbar(wait-table-list)', function(obj) {
                let type = obj.event;
                if (type === 'refresh' && !active[type]) {
                    layui.table.reload('wait-table-list');
                } else {
                    active[type] ? active[type].call(this, obj) : '';
                }
            });

            // 监听表格右侧事件
            layui.table.on('tool(wait-table-list)', function(obj) {
                let type = obj.event;
                active[type] ? active[type].call(this, obj) : '';
            });

            // 监听是否切换
            layui.form.on('switch(switch-status)', function(obj) {
                active['change'] ? active['change'].call(this, obj) : '';
            });
        });

        return active;
    }
    // 搜索
    ,search: function (table) {
        // 监听搜索
        layui.form.on('submit(search)', function(data) {
            table.reload({
                where: waitUtil.filterNullObj(data.field),
                page: {curr: 1}
            });
        });

        // 清空搜索
        layui.form.on('submit(clear-search)', function() {
            $(".layui-search input").val("");
            $(".layui-search select").val("");
            layui.form.render("select");
            table.reload({
                where: [],
                page: {curr: 1}
            });
        });
    }
    // 表格
    ,table: function (options) {
        return layui.table.render({
            ...options
            ,elem: options.elem
            ,url: options.url
            ,method: options.method || 'GET'
            ,toolbar: options.toolbar === false ? false : options.toolbar || '#toolbar'
            ,defaultToolbar: options.defaultToolbar === false ? [] : ['filter', 'exports', 'print']
            ,cellExpandedMode: options.cellExpandedMode || 'tips'
            ,page: options.page === undefined ? true : options.page
            ,limit: options.limit || 20
            ,limits: options.limits || [20, 40, 60, 80, 100, 120, 140, 160]
            ,skin: options.skin ||  'line'
            ,cols: options.cols
            ,parseData: function(res) {
                if (res.data.list === undefined) {
                    return {
                        'code': res.code
                        ,'msg': res.msg
                        ,'extend': res.extend || []
                        ,'data': res.data
                    };
                } else {
                    return {
                        'code': res.code
                        ,'msg': res.msg
                        ,'count': res.data.count
                        ,'extend': res.data.extend || []
                        ,'data': res.data.list
                    };
                }
            },
            done: function(res){
                setTimeout(function () {
                    // 适配行高
                    $('.layui-table-main tr').each(function (index, val) {
                        $($('.layui-table-fixed-l .layui-table-body tbody tr')[index]).height($(val).height());
                        $($('.layui-table-fixed-r .layui-table-body tbody tr')[index]).height($(val).height());
                    });

                    // 回调事件
                    if (options.done) {
                        options.done(res);
                    }
                }, 100);
            }
        });
    }
    // 复选
    ,checkbox: function (options) {
        options    = options ? options : {};
        let key    = options.key    || 'id';
        let filter = options.filter || 'wait-table-list';
        let layero = options.layero ? options.layero.layui.table : layui.table;
        let arrays = layero.checkStatus(filter).data;
        if (!key) return arrays;
        let data = [];
        arrays.forEach(function (item) {
            data.push(item[key]);
        });
        return data;
    }
    // 图库
    ,uploader: function (options) {
        options = options === undefined ? {} : options;
        let limit  = options.limit  || 1;
        let type   = options.type   || 'image';
        let width  = options.width  || '850px';
        let height = options.height || '600px';
        if (layui.device().mobile) { width = '95%'; height = '95%'; }

        return new Promise((resolve) => {
            let typeNum = type === 'image' ? 10 : 20;
            let paths = window.location.pathname.split('/')[1];
            paths = paths.endsWith('/') ? paths : paths + '/';
            let route = '/' + paths + 'attach/index?type=' + typeNum + '&limit='+limit;
            parent.layer.open({
                type: 2
                ,title: '选择附件'
                ,shadeClose: true
                ,maxmin: true
                ,skin: 'layer-skin-black'
                ,anim: 1
                ,shade: 0.3
                ,area: [width, height]
                ,content: route
                ,success: function (layero, index) {
                    let iframeNode = $(layero).find('iframe').contents();
                    let iframeWin = $(layero).find('iframe')[0].contentWindow;

                    iframeNode.find('#okFile').click(function () {
                        let urls = iframeWin.getUrlArr();

                        if (urls.length <= 0) {
                            parent.layer.msg('请至少选择一个!');
                            return false;
                        }

                        if (urls.length > limit) {
                            parent.layer.msg("限制只能选" + limit + "个");
                        }

                        parent.layer.close(index);
                        resolve(urls);
                    });
                }
            });
        });
    }
    // 锁定按钮
    ,locking: function (options) {
        let icon = 'layui-icon layui-icon-loading ';
        let anim = 'layui-anim layui-anim-rotate layui-anim-loop';
        if (!$(options).hasClass('layui-btn-forbid')) {
            $(options).addClass('layui-btn-forbid');
            $(options).prepend('<i class="' + icon + anim + '" style="font-size:13px;"></i> ');
        }
    }
    // 解锁按钮
    ,unlock: function (options) {
        $(options).removeClass('layui-btn-forbid');
        $(options).children('i').remove();
    }
    // 截流防抖
    ,debounce(delay, func) {
        let timer = null;
        return function() {
            let context = this;
            let args = arguments;
            clearTimeout(timer);
            timer = setTimeout(function() {
                func.apply(context, args);
            }, delay);
        };
    }
    // 过滤对象空字段
    ,filterNullObj: function (obj) {
        return Object.keys(obj).reduce((acc, key) => {
            if (obj[key] !== '' && obj[key] !== null && obj[key] !== undefined) {
                acc[key] = obj[key];
            }
            return acc;
        }, {});
    }
}

/**
 * 初始加载
 */
function layInit() {
    if (waitConfig.isTabReserve) {
        // 激活选项卡
        let iframe = $(window.parent.document).find('.wait-body .tab-body-item.layui-show iframe');
        $(document).on('click', '.layui-tab[lay-filter=tab] li', function () {
            let tab = $(this).attr('data-tab');
            if (tab !== null && tab !== null) {
                iframe.attr('data-tab', tab);
            }
        });

        // 切换选项卡
        let tab = iframe.attr('data-tab');
        if (tab !== null && tab !== null) {
            let elem = $('.layui-tab[lay-filter=tab] .layui-tab-title li[data-tab=' + tab + ']');
            if (elem.length) {
                elem.click();
            }
        }
    }
}

/**
 * 悬停提示
 */
function layTips() {
    $('body').on('mouseenter', '*[lay-tips]', function(){
        let that = $(this);
        let tips      = that.attr('lay-tips');
        let offset    = that.attr('lay-offset');
        let direction = that.attr('lay-direction');
        let index = layer.tips(tips, this, {
            tips: direction || 1
            ,time: -1
            ,success: function(layero){
                if(offset){
                    layero.css('margin-left', offset + 'px');
                }
            }
        });
        that.data('index', index);
    }).on('mouseleave', '*[lay-tips]', function(){
        layer.close($(this).data('index'));
    });
}

/**
 * 渲染主题
 */
function layTheme() {
    let theme = waitCache.getItem('theme') || waitConfig.theme;
    if (theme) {
        $('body').attr('data-theme', theme);
    }
}

/**
 * 附件删除
 */
function layThumbDelete() {
    $(document).on('click', '.thumbnail .preview i', function () {
        let elem   = $(this).parents('.thumbnail');
        let type   = elem.attr('data-type') || 'image';
        let limit  = parseInt(elem.attr('data-limit') || 1);

        $(this).parent().remove();
        let previews = elem.children('.musters .preview');
        if (previews.length <= 0 || previews.length < limit) {
            elem.children('.builder').removeClass('layui-hide');
        }
    });
}

/**
 * 附件上传
 */
function layThumbUpload() {
    let $body = $('body');
    let builder = $body.find('.thumbnail .layui-auto-call');

    builder.each(function () {
        // 附件节点
        let that   = $(this);
        let node   = $(this).parents('.thumbnail');
        // 附件类型
        let type   = node.attr('data-type');
        // 附件字段
        let field  = node.attr('data-field');
        // 限制数量
        let limit  = parseInt(node.attr('data-limit') || 1);
        // 是否隐藏
        let hide   = parseInt(node.attr('data-hide') || 1);
        // 是否水印
        let water  = Boolean(node.attr('data-water') || true);
        // 上传引擎
        let engine = node.attr('data-engine') || 'permanent';
        // 路径名称
        let pathname = window.location.pathname.split('/')[1];

        let url;
        let accept;
        let acceptMime;
        let exts;
        let size; // KB
        switch (type||'image') {
            case 'image':
                accept = 'images';
                acceptMime = 'image/*';
                exts = 'png|jpg|jpeg|gif|bmp|ico';
                size = 10 * 1024;
                field = field === undefined ? 'image' : field;
                url = '/' + pathname + '/upload/'+ engine + '?type=picture';
                break;
            case 'video':
                accept = 'video';
                acceptMime = 'video/*';
                exts = 'mp4|mp3|avi|flv|rmvb|mov';
                size = 30 * 1024;
                field = field === undefined ? 'video' : field;
                url = '/' + pathname + '/upload/' + engine + '?type=video';
                break;
            case 'package':
                accept = 'file';
                acceptMime = 'file/*';
                exts = 'zip|rar|iso|7z|tar|gz|arj|bz2';
                size = 30 * 1024;
                field = field === undefined ? 'package' : field;
                url = '/' + pathname + '/upload/' + engine + '?type=package';
                break;
            case 'document':
                accept = 'file';
                acceptMime = 'file/*';
                exts = 'txt|doc|docx|xls|xlsx|ppt|pptx|pdf|pem';
                size = 30 * 1024;
                field = field === undefined ? 'document' : field;
                url = '/' + pathname + '/upload/' + engine + '?type=document';
                break;
        }

        function getTemplate(type, url) {
            switch (type) {
                case 'image':
                case 'package':
                case 'document':
                    if (type === 'image') {
                        return '<img src="' + url + '" alt="icon" class="previewImage" />';
                    } else {
                        return '<img src="' + url + '" alt="icon" />';
                    }
                    break;
                case 'video':
                    return '<video src="'+url+'"></video>';
            }
        }

        let layerIndex;
        layui.upload.render({
            elem: that
            ,url: url
            ,field: 'file'
            ,accept: accept
            ,acceptMime: acceptMime
            ,exts: exts
            ,size: size
            ,data: {water: water, hide: hide}
            ,before: function () {
                layerIndex = layer.msg('上传中...', {
                    icon: 16,
                    shade: 0.01,
                    time: 0
                });
            }
            ,error: function (e) {
                layer.close(layerIndex);
                layer.msg(e, {icon: 2, time: 1500});
            }
            ,done: function(res){
                layer.close(layerIndex);
                if (res.code === 0) {
                    let node = this.elem;
                    if (!node.prev().hasClass('musters')) {
                        node.before('<div class="musters"></div>');
                    }

                    if (node.prev().find('.preview').length >= limit) {
                        return layer.msg('limit exceeded error');
                    }

                    // 显示图片
                    let thatMask = node.parent().parent();
                    let template = '';
                    template += '<div class="preview">';
                    template += '<input type="hidden" name="' + field + '" value="' + res.data.url + '">';
                    template += '<i class="layui-icon layui-icon-close"></i>';
                    template += getTemplate(type, res.data.icon);
                    if (node.parent().hasClass('mask')) {
                        node.parent().parent().prev().append(template);
                        if (node.parent().parent().prev().find('.preview').length >= limit) {
                            node.parent().parent().addClass('layui-hide');
                        }
                    } else {
                        node.prev().append(template);
                        if (node.prev().find('.preview').length >= limit) {
                            node.addClass('layui-hide');
                        }
                    }

                    // 拖动功能
                    let dragNodes = document.querySelectorAll('.thumbnail .musters');
                    for (let i=0; i<dragNodes.length; i++) {
                        Sortable.create(dragNodes[i], {animation: 150, ghostClass: 'blue-background-class'});
                    }
                } else {
                    return layer.msg(res.msg);
                }
            }
        });
    });
}

/**
 * 附件选择
 */
function layThumbSelect() {
    $(document).on('click', '.thumbnail .layui-auto', function () {
        let that   = $(this);
        let elem   = $(this).parents('.thumbnail');
        let type   = elem.attr('data-type')  || 'image';
        let limit  = parseInt(elem.attr('data-limit') || 1);
        let water  = Boolean(elem.attr('data-water') || true);
        let field  = elem.attr('data-field')  || 'image';
        let width  = elem.attr('data-width')  || '850px';
        let height = elem.attr('data-height') || '600px';

        const selectUrls = [];
        const selectElms = elem.children('.musters').children('.preview');
        selectElms.each((index, item) => {
            selectUrls.push({
                url: $(item).children('input').val(),
                icon: $(item).children('img').attr('src')
            })
        });

        const typeArr = {image: 10, video: 20, package: 30, document: 40}
        const typeNum = typeArr[type];

        function getTemplate(type, url) {
            switch (type) {
                case 'video':
                    return '<video src="'+url+'"></video>'
                case 'image':
                case 'package':
                case 'document':
                    if (type === 'image') {
                        return '<img src="' + url + '" alt="icon" class="previewImage" />';
                    } else  {
                        return '<img src="' + url + '" alt="icon" />';
                    }
            }
        }

        return new Promise((resolve) => {
            let urls = encodeURIComponent(JSON.stringify(selectUrls))
            let paths = window.location.pathname.split('/')[1];
            let route = `/${paths}/attach/index?limit=${limit}&water=${water}&type=${typeNum}&urls=${urls}`;

            parent.layer.open({
                type: 2
                ,title: '选择附件'
                ,shadeClose: true
                ,maxmin: true
                ,skin: 'layer-skin-black'
                ,anim: 1
                ,shade: 0.3
                ,area: [width, height]
                ,content: route
                ,success: function (layero, index) {
                    let iframeNode = $(layero).find('iframe').contents();
                    let iframeWin = $(layero).find('iframe')[0].contentWindow;

                    iframeNode.find('#okFile').click(function () {
                        let urls = iframeWin.getUrlArr();

                        if (urls.length <= 0) {
                            parent.layer.msg('请至少选择一个素材!');
                            return false;
                        }

                        if (urls.length > limit) {
                            parent.layer.msg("限制只能选" + limit + "个");
                        }

                        if (that.prev().find('.preview').length >= limit) {
                            return layer.msg('limit exceeded error');
                        }

                        elem.children('.musters').html('');

                        urls.forEach(function (item) {
                            // 显示图片
                            let thatMask = that.parent().parent();
                            let template = '';
                            template += '<div class="preview">';
                            template += '<input type="hidden" name="'+ field +'" value="'+ item.url +'">';
                            template += '<i class="layui-icon layui-icon-close"></i>';
                            template += getTemplate(type, item.icon);
                            if (that.parent().hasClass('mask')) {
                                that.parent().parent().prev().append(template);
                                if (thatMask.prev().find('.preview').length >= limit) {
                                    thatMask.addClass('layui-hide');
                                }
                            } else {
                                that.prev().append(template);
                                if (that.prev().find('.preview').length >= limit) {
                                    that.addClass('layui-hide');
                                }
                            }

                            // 拖动功能
                            let dragNodes = document.querySelectorAll('.thumbnail .musters');
                            for (let i=0; i<dragNodes.length; i++) {
                                Sortable.create(dragNodes[i], {animation: 150, ghostClass: 'blue-background-class'});
                            }
                        });

                        parent.layer.close(index);
                        resolve(urls);
                    });
                }
            });
        });
    });
}

/**
 * 图片预览
 */
function previewImage(obj) {
    let img = new Image();
    img.src = obj.src;
    img.onload = function (ev) {
        // 图片的宽高值
        let height  = this.height;
        let width   = this.width;
        let imgHtml = "<img style='height: 100%;width: 100%' src='" + obj.src + "' alt='img' />";

        // 获取窗口宽高
        const windowWidth = parent.window.innerWidth - 50;
        const windowHeight = parent.window.innerHeight - 50;

        // 图片显示面积
        let area = [];
        width = width <= windowWidth ? width : windowWidth
        height = height <= windowHeight ? height : windowHeight
        area = [width + 'px', height + 'px'];

        // 弹出层显示图
        top.layer.open({
            type: 1,
            shade: 0.8,
            offset: 'auto',
            area: area,
            shadeClose: true,
            scrollbar: false,
            title: false,
            content: imgHtml
        });
    };
}
